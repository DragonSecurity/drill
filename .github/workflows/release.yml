name: build-and-release

on:
  push:
    branches: [ main ]
    tags: ['v*']     # create a Release on tag push (e.g. v1.2.3)
  pull_request:
  workflow_dispatch:

permissions:
  contents: write

env:
  APP_NAME: drill
  PLATFORMS: linux/amd64 linux/arm64 darwin/amd64 darwin/arm64 windows/amd64 windows/arm64
  CGO_ENABLED: "0"
  GOFLAGS: -trimpath

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.ref }}

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.25'
          cache: true

      - name: Version info
        id: vars
        shell: bash
        run: |
          if [[ "${GITHUB_REF_TYPE}" == "tag" ]]; then
            VERSION="${GITHUB_REF_NAME}"
          else
            VERSION="$(git describe --tags --always --dirty || true)"
          fi
          COMMIT="$(git rev-parse --short HEAD)"
          DATE="$(date -u +"%Y-%m-%dT%H:%M:%SZ")"
          echo "version=${VERSION}" | tee -a $GITHUB_OUTPUT
          echo "commit=${COMMIT}"   | tee -a $GITHUB_OUTPUT
          echo "date=${DATE}"       | tee -a $GITHUB_OUTPUT

      - name: Build cross-platform
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p dist

          # Inject ldflags into github.com/DragonSecurity/drill/cmd variables
          PKG="github.com/DragonSecurity/drill"
          PKG_CMD="${PKG}/cmd"
          LDFLAGS="-s -w -X ${PKG_CMD}.Version=${{ steps.vars.outputs.version }} -X ${PKG_CMD}.Commit=${{ steps.vars.outputs.commit }} -X ${PKG_CMD}.Date=${{ steps.vars.outputs.date }}"

          for platform in ${PLATFORMS}; do
            os="${platform%/*}"
            arch="${platform#*/}"
            ext=""
            [[ "$os" == "windows" ]] && ext=".exe"

            out_dir="dist/${APP_NAME}_${os}_${arch}"
            bin="${APP_NAME}${ext}"
            mkdir -p "${out_dir}"

            echo ">> building ${out_dir}/${bin}"
            # IMPORTANT: build a single package (the root main package), not ./...
            GOOS="$os" GOARCH="$arch" CGO_ENABLED=${CGO_ENABLED} \
              go build ${GOFLAGS} -ldflags "${LDFLAGS}" -o "${out_dir}/${bin}" .

            pkgbase="${APP_NAME}_${{ steps.vars.outputs.version }}_${os}_${arch}"

            if [[ "$os" == "windows" ]]; then
              # Zip (flattened)
              if [[ -f README.md ]]; then
                zip -j "dist/${pkgbase}.zip" "${out_dir}/${bin}" README.md
              else
                zip -j "dist/${pkgbase}.zip" "${out_dir}/${bin}"
              fi
            else
              # Tar.gz with a small staging dir to control names
              staging="dist/_pkg_${os}_${arch}"
              rm -rf "$staging"; mkdir -p "$staging"
              cp "${out_dir}/${bin}" "$staging/"
              [[ -f README.md ]] && cp README.md "$staging/" || true
              (cd "$staging" && tar -czf "../${pkgbase}.tar.gz" .)
              rm -rf "$staging"
            fi
          done

          # SHA256 checksums for packaged archives
          (cd dist && sha256sum ${APP_NAME}_*.tar.gz ${APP_NAME}_*.zip > SHA256SUMS)

      - name: Upload artifacts (branches/PRs)
        if: github.event_name != 'push' || startsWith(github.ref, 'refs/heads/')
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.APP_NAME }}-artifacts-${{ github.run_id }}
          path: |
            dist/${{ env.APP_NAME }}_*
            dist/SHA256SUMS

      - name: Create GitHub Release
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v2
        with:
          name: ${{ github.ref_name }}
          draft: false
          prerelease: ${{ contains(github.ref_name, '-') }}
          generate_release_notes: true
          files: |
            dist/${{ env.APP_NAME }}_*.tar.gz
            dist/${{ env.APP_NAME }}_*.zip
            dist/SHA256SUMS

name: release

on:
  push:
    tags:
      - "v*"          # tag like v0.1.0 to cut a release
  pull_request:
  workflow_dispatch:

permissions:
  contents: write     # needed for creating/uploading releases

env:
  CARGO_TERM_COLOR: always

jobs:
  build-linux:
    name: linux (${{ matrix.target }})
    runs-on: ubuntu-24.04
    strategy:
      fail-fast: false
      matrix:
        target:
          - x86_64-unknown-linux-musl
          - aarch64-unknown-linux-musl

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Rust (stable) with targets
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Cache cargo (deps + target)
        uses: Swatinem/rust-cache@v2

      # Use zig for MUSL cross-linking so this works under `act` (no Docker-in-Docker required)
      - name: Setup Zig
        uses: mlugg/setup-zig@v2

      - name: Install cargo-zigbuild
        run: cargo install cargo-zigbuild

      - name: Build (release)
        run: cargo zigbuild --release --target ${{ matrix.target }}

      - name: Package
        id: pkg
        shell: bash
        run: |
          set -euo pipefail
          BIN="drill"
          TARGET="${{ matrix.target }}"
          OUTDIR="dist/${TARGET}"
          mkdir -p "${OUTDIR}"
          cp "target/${TARGET}/release/${BIN}" "${OUTDIR}/"
          cp README.md "${OUTDIR}/" 2>/dev/null || true
          cp LICENSE* "${OUTDIR}/" 2>/dev/null || true
          TARBALL="drill-${TARGET}.tar.gz"
          tar -C dist -czf "${TARBALL}" "${TARGET}"
          sha256sum "${TARBALL}" > "${TARBALL}.sha256"
          echo "artifact=${TARBALL}" >> "$GITHUB_OUTPUT"

      - name: Upload artifacts (CI view)
        uses: actions/upload-artifact@v4
        with:
          name: drill-${{ matrix.target }}
          path: |
            drill-${{ matrix.target }}.tar.gz
            drill-${{ matrix.target }}.tar.gz.sha256
          if-no-files-found: error

  # Skip macOS on `act` (act doesn't provide real macOS runners; its Linux containers can't handle -arch/SDK flags)
  build-macos:
    if: ${{ github.actor != 'nektos/act' }}
    name: macos (${{ matrix.target }})
    runs-on: macos-14  # Apple Silicon runners
    strategy:
      fail-fast: false
      matrix:
        target:
          - aarch64-apple-darwin
          - x86_64-apple-darwin

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Rust (stable) with targets
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Cache cargo (deps + target)
        uses: Swatinem/rust-cache@v2

      - name: Build (release)
        run: cargo build --release --target ${{ matrix.target }}

      - name: Package
        id: pkg
        shell: bash
        run: |
          set -euo pipefail
          BIN="drill"
          TARGET="${{ matrix.target }}"
          OUTDIR="dist/${TARGET}"
          mkdir -p "${OUTDIR}"
          cp "target/${TARGET}/release/${BIN}" "${OUTDIR}/"
          cp README.md "${OUTDIR}/" 2>/dev/null || true
          cp LICENSE* "${OUTDIR}/" 2>/dev/null || true
          TARBALL="drill-${TARGET}.tar.gz"
          tar -C dist -czf "${TARBALL}" "${TARGET}"
          shasum -a 256 "${TARBALL}" > "${TARBALL}.sha256"
          echo "artifact=${TARBALL}" >> "$GITHUB_OUTPUT"

      - name: Upload artifacts (CI view)
        uses: actions/upload-artifact@v4
        with:
          name: drill-${{ matrix.target }}
          path: |
            drill-${{ matrix.target }}.tar.gz
            drill-${{ matrix.target }}.tar.gz.sha256
          if-no-files-found: error

  # Skip Windows on `act` (no MSVC link.exe inside act's Linux containers)
  build-windows:
    if: ${{ github.actor != 'nektos/act' }}
    name: windows (${{ matrix.target }})
    runs-on: windows-2022
    strategy:
      fail-fast: false
      matrix:
        target:
          - x86_64-pc-windows-msvc
          - aarch64-pc-windows-msvc

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Rust (stable) with targets
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Cache cargo (deps + target)
        uses: Swatinem/rust-cache@v2

      - name: Build (release)
        shell: bash
        run: cargo build --release --target ${{ matrix.target }}

      - name: Package (.zip) + checksum
        shell: pwsh
        run: |
          $Bin    = "drill.exe"
          $Target = "${{ matrix.target }}"
          $OutDir = "dist/$Target"
          New-Item -ItemType Directory -Force -Path $OutDir | Out-Null
          Copy-Item "target/$Target/release/$Bin" "$OutDir/"
          if (Test-Path README.md) { Copy-Item README.md "$OutDir/" }
          Get-ChildItem -Path . -Filter "LICENSE*" | ForEach-Object { Copy-Item $_.FullName "$OutDir/" }
          $Zip = "drill-$Target.zip"
          Compress-Archive -Path "$OutDir/*" -DestinationPath $Zip -Force
          (Get-FileHash $Zip -Algorithm SHA256).Hash + "  " + $Zip | Out-File "$Zip.sha256" -Encoding ASCII

      - name: Upload artifacts (CI view)
        uses: actions/upload-artifact@v4
        with:
          name: drill-${{ matrix.target }}
          path: |
            drill-${{ matrix.target }}.zip
            drill-${{ matrix.target }}.zip.sha256
          if-no-files-found: error

  # Full release (GitHub runners)
  release:
    if: ${{ startsWith(github.ref, 'refs/tags/') && github.actor != 'nektos/act' }}
    needs:
      - build-linux
      - build-macos
      - build-windows
    runs-on: ubuntu-24.04

    steps:
      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist
          merge-multiple: true

      - name: Create / Update GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            dist/*.tar.gz
            dist/*.tar.gz.sha256
            dist/*.zip
            dist/*.zip.sha256
          prerelease: ${{ contains(github.ref_name, '-rc') || contains(github.ref_name, '-beta') }}
          generate_release_notes: true
          fail_on_unmatched_files: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Local tag test release when running under `act` (linux artifacts only)
  release-linux-only:
    if: ${{ startsWith(github.ref, 'refs/tags/') && github.actor == 'nektos/act' }}
    needs: build-linux
    runs-on: ubuntu-24.04

    steps:
      - name: Download linux artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist
          merge-multiple: true

      - name: Create / Update GitHub Release (linux only)
        uses: softprops/action-gh-release@v2
        with:
          files: |
            dist/*.tar.gz
            dist/*.tar.gz.sha256
          prerelease: ${{ contains(github.ref_name, '-rc') || contains(github.ref_name, '-beta') }}
          generate_release_notes: true
          fail_on_unmatched_files: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
